=== GPU SITE


== TOPICS

+ # In Editor, single-render webgl draws over drawer when open
= Basic styling
	- Write example post
		- Create webgl content for example post
		+ Figure out embedding web-gl content from Markdown
			> MD formatting rule: after </web-gl>, must have space, then 2 newlines in order to get correct float/clear behavior
		- Finish example post
= Backend first pass
	- Integrate Showdown for Markdown conversion on the server side
	* Research how AWS would work
		- Set up domain with Route 43 or whatever
		- Set up S3 bucket
		- Set up CDN
		- Set up Lambda calls to access where necessary
		- Database
			- Find relevant DynamoDB resources
			- Set up posts table
			? Set up tabs table
			? Set up quips table
				> This might be better as a local content file so that I can keep it doing serverless rendering with runtime JS
			- Set up threads table
		- Set up Cognito for security
	- Make plan - DB, HTML/SVG/JSON/texture files
= <web-gl> Enhancements
	- Load and display OBJ format
	- Support interaction, like click/drag-to-move camera (or button for different ortho)
	- Support external interaction, like radio button to change obj
	- "Pop-out" support - window that fills width
	+ Use existing font-size attribute instead of custom fontsize
= Basic styling
	? Build GPU SVG model
	- Post item: make title background a web-gl scene
	+ Convert to Twind for layout
		- Various layout values for responsive page sizing
= Wrap <svg> with component that supports aspect-ratio
	- Take "aspect-ratio" property
	? Override "width" and "height"
	- Watch "aspect-ratio", "width", "height" for change and fill in the other attribute if the other is undefined based on "aspect-ratio", if defined
= Source code view
	- Show vs/fs in tab or drawer with <web-gl>
	- Show with syntax coloring
	- Use source code font - Source Code Pro?
	? "Copy to Clipboard" button


=== DONE

+ # Editing body with WebGL clears the webgl in the header which never reloads (may be fixed by caching step)
+ # After editing with webgl load off, main post page doesn't load webgl either (may be unnecessary after caching step)
= Admin page
	+ Editor: map WebGL div-id to <web-gl...> tag and WebGLElement load and cache it during content update
		+ Migration command: delete and create new viewport, then reconnect existing element
		+ Figure out where this is going bad -- put console outputs everywhere we create a new viewport?
			+ Probably a huge problem in the editor, with typing and whatnot
+ # Scroll to top on navigate is broken
+ # WebGL not clipping on post list when scrolled under navbar
+ # <web-gl> not rendering properly after Twind conversion
	> Looks like a sizing problem -- needs display: block to use size params
	> Nope, it was drop-shadow *facepalm*
= Basic styling
	+ Pick font
	+ Convert to Twind for layout
		+ FAQ page first
			+ Prose for article writing
		+ Rebuild navbar
		+ Rebuild FAQ
		+ Rebuild post-list
		+ Rebuild post-tile
		+ Rebuild post-item
		+ Rebuild edit list
		+ Rebuild editor
+ # WebGL not clipping to owning window properly (see test post in Editor preview)
= <web-gl> Enhancements
	+ Massive inefficiency in WebGL with viewports, resizing/scrolling, rendering
		+ Right now, it sets up new global window listeners for resize and scroll for each new viewport
			> It only cleans up one each on navigate away
		+ If any resize or scroll event happens, it does a full render for each listener that fires, rendering ALL viewports no matter which was actually affected
		x Ideal version: one listener set for each viewport, rendering only the affected ones on events
			x Viewports hold the listeners, trigger renders, and clean them up themselves
				> Elements already clean up their resize listener
			+ WebGL object can still do global renders, but it seems like de-centralizing would be a win here
			> Unfortunately, knowing which <web-gl> is under which scrolling <div> is very difficult due to Shadow DOM, so a single global re-render on scroll is best
		+ The WebGL instance can hold a single listener each for window.resize and document.body.scroll -- it never needs to clean them up
			+ WebGLElement will handle its own scroll logic based on calls via WebGLViewport
		+ # There is a bug with rendering single anims that has them failing to draw the first frame due to fade-in
			+ Animate when fading in regardless of anim status of scene
= QoL
	+ Friendly URL - give each post a mini-URL post string (posts/minimapping)
= Wrap <svg> with component that supports aspect-ratio
	> Note: giving a width="" and viewbox="0 0 100 77" or similar makes it preserve that aspect ratio
+ # app.ts pageActive class can stop changing if you click through pages quickly
+ # Refreshing on a post item (posts/1) will have all the nav buttons with no class
= Admin page
	+ Provide Markdown->HTML live preview editor
		+ Checkbox to enable/disable WebGL embed loads on editor page for performance reasons during editing
		+ Figure out joined scrolling
		x Add "copy to clipboard" button
		x Add "paste from clipboard" button
		x Statistics like word count, image count, embed count
	+ Every time it translates to HTML it needs to clear the old <web-gl> components
	+ Edit change debounce - wait for idle, like 250ms since last typing?
		+ Add timeout for final edit step
	+ Make editor.ts embed on admin.ts
	+ Make new post list that embeds on admin.ts
		+ When you click on a post you can edit it, opening editor.ts with that post ID
	+ Finish editor MVP
		+ In editor, you can hit Save on a post and it will commit the changes to memory in post data (simulating eventually writing to the DB and updating a backup)
		+ Edit title
		+ Edit description
		+ Edit tags
		+ Swap BG colors
		+ Update modified date (create modified date too)
		x Post Visual refresh button
		+ Do Grid-Garden game to see if I can make this grid work properly
	+ Move relevant CSS to external file to include with the editor
= Editor
	+ "Admin" page
= Basic styling
	+ Figure out how to style content coming from Markdown
= Editor
	x Override styling to be full-width
